/**
 * ‰ΩøÁî®PlaywrightÊµãËØïCredit BalanceÂäüËÉΩ
 */

import { chromium } from 'playwright';

const API_BASE = 'https://gomail.asksy.dpdns.org';
const API_TOKEN = '8f7e6d5c4b3a2918';
const TEST_EMAIL = 'karen.lewis@asksy.dpdns.org';

/**
 * ÊµãËØïCredit Balance API
 */
async function testCreditBalanceAPI() {
    console.log('üöÄ ÂêØÂä®PlaywrightÊµãËØï...');
    
    // ÂêØÂä®ÊµèËßàÂô®
    const browser = await chromium.launch({ 
        headless: false, // ÊòæÁ§∫ÊµèËßàÂô®Á™óÂè£
        slowMo: 1000 // ÊØè‰∏™Êìç‰ΩúÈó¥Èöî1ÁßíÔºå‰æø‰∫éËßÇÂØü
    });
    
    const context = await browser.newContext({
        // ËÆæÁΩÆÁî®Êà∑‰ª£ÁêÜ
        userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
    });
    
    const page = await context.newPage();
    
    try {
        console.log('üì± ÂºÄÂßãÊµãËØïCredit Balance API...');
        
        // 1. ÊµãËØïÂçï‰∏™ÈÇÆÁÆ±Êõ¥Êñ∞API
        console.log('üß™ ÊµãËØï1: Âçï‰∏™ÈÇÆÁÆ±Credit BalanceÊõ¥Êñ∞');
        
        const singleUpdateResponse = await page.evaluate(async ({ apiBase, apiToken, testEmail }) => {
            try {
                const formData = new FormData();
                formData.append('action', 'update-single');
                formData.append('email', testEmail);
                
                const response = await fetch(`${apiBase}/api/update-credit-balance`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${apiToken}`
                    },
                    body: formData
                });
                
                const result = await response.text();
                
                return {
                    status: response.status,
                    statusText: response.statusText,
                    headers: Object.fromEntries(response.headers.entries()),
                    body: result
                };
            } catch (error) {
                return {
                    error: error.message
                };
            }
        }, { apiBase: API_BASE, apiToken: API_TOKEN, testEmail: TEST_EMAIL });
        
        console.log('üì° Âçï‰∏™Êõ¥Êñ∞APIÂìçÂ∫î:');
        console.log('  Áä∂ÊÄÅ:', singleUpdateResponse.status);
        console.log('  ÂìçÂ∫î‰Ωì:', singleUpdateResponse.body);

        // Ê£ÄÊü•ÂìçÂ∫îÊòØÂê¶ÊúâÈîôËØØ
        if (singleUpdateResponse.error) {
            console.log('‚ùå ËØ∑Ê±ÇÂ§±Ë¥•:', singleUpdateResponse.error);
        } else if (singleUpdateResponse.body) {
            // Â∞ùËØïËß£ÊûêJSONÂìçÂ∫î
            try {
                const singleResult = JSON.parse(singleUpdateResponse.body);
                if (singleResult.success) {
                    console.log('‚úÖ Âçï‰∏™ÈÇÆÁÆ±Êõ¥Êñ∞ÊàêÂäü!');
                    console.log('üìä Êõ¥Êñ∞ÁªìÊûú:', singleResult.data);
                } else {
                    console.log('‚ùå Âçï‰∏™ÈÇÆÁÆ±Êõ¥Êñ∞Â§±Ë¥•:', singleResult.error);
                }
            } catch (parseError) {
                console.log('‚ö†Ô∏è ÂìçÂ∫î‰∏çÊòØJSONÊ†ºÂºèÔºåÂèØËÉΩÊòØHTMLÈîôËØØÈ°µÈù¢');
                console.log('üìÑ ÂéüÂßãÂìçÂ∫î:', singleUpdateResponse.body.substring(0, 500));
            }
        } else {
            console.log('‚ùå Ê≤°ÊúâÊî∂Âà∞ÂìçÂ∫î');
        }
        
        console.log('\n' + '='.repeat(80) + '\n');
        
        // 2. Á≠âÂæÖ‰∏Ä‰∏ãÔºåÁÑ∂ÂêéÊµãËØïÊâπÈáèÊõ¥Êñ∞
        console.log('‚è≥ Á≠âÂæÖ5ÁßíÂêéÊµãËØïÊâπÈáèÊõ¥Êñ∞...');
        await page.waitForTimeout(5000);
        
        console.log('üß™ ÊµãËØï2: ÊâπÈáèCredit BalanceÊõ¥Êñ∞');
        
        const batchUpdateResponse = await page.evaluate(async ({ apiBase, apiToken }) => {
            try {
                const formData = new FormData();
                formData.append('action', 'update-all');
                
                const response = await fetch(`${apiBase}/api/cron-update-credit-balance`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${apiToken}`
                    },
                    body: formData
                });
                
                const result = await response.text();
                
                return {
                    status: response.status,
                    statusText: response.statusText,
                    headers: Object.fromEntries(response.headers.entries()),
                    body: result
                };
            } catch (error) {
                return {
                    error: error.message
                };
            }
        }, { apiBase: API_BASE, apiToken: API_TOKEN });
        
        console.log('üì° ÊâπÈáèÊõ¥Êñ∞APIÂìçÂ∫î:');
        console.log('  Áä∂ÊÄÅ:', batchUpdateResponse.status);
        console.log('  ÂìçÂ∫î‰Ωì:', batchUpdateResponse.body);

        // Ê£ÄÊü•ÂìçÂ∫îÊòØÂê¶ÊúâÈîôËØØ
        if (batchUpdateResponse.error) {
            console.log('‚ùå ËØ∑Ê±ÇÂ§±Ë¥•:', batchUpdateResponse.error);
        } else if (batchUpdateResponse.body) {
            // Â∞ùËØïËß£ÊûêJSONÂìçÂ∫î
            try {
                const batchResult = JSON.parse(batchUpdateResponse.body);
                if (batchResult.success) {
                    console.log('‚úÖ ÊâπÈáèÊõ¥Êñ∞ÊàêÂäü!');
                    console.log('üìä Êõ¥Êñ∞ÁªìÊûú:', batchResult.data);
                } else {
                    console.log('‚ùå ÊâπÈáèÊõ¥Êñ∞Â§±Ë¥•:', batchResult.error);
                }
            } catch (parseError) {
                console.log('‚ö†Ô∏è ÂìçÂ∫î‰∏çÊòØJSONÊ†ºÂºèÔºåÂèØËÉΩÊòØHTMLÈîôËØØÈ°µÈù¢');
                console.log('üìÑ ÂéüÂßãÂìçÂ∫î:', batchUpdateResponse.body.substring(0, 500));
            }
        } else {
            console.log('‚ùå Ê≤°ÊúâÊî∂Âà∞ÂìçÂ∫î');
        }
        
        console.log('\n' + '='.repeat(80) + '\n');
        
        // 3. ÊµãËØïÁÆ°ÁêÜÈ°µÈù¢ÊòæÁ§∫
        console.log('üß™ ÊµãËØï3: ËÆøÈóÆÁÆ°ÁêÜÈ°µÈù¢Êü•ÁúãCredit BalanceÊòæÁ§∫');
        
        // ÂØºËà™Âà∞ÁÆ°ÁêÜÈ°µÈù¢
        await page.goto(`${API_BASE}/test-mailboxes-db`);
        
        // Á≠âÂæÖÈ°µÈù¢Âä†ËΩΩ
        await page.waitForLoadState('networkidle');
        
        // Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÁôªÂΩï
        const currentUrl = page.url();
        if (currentUrl.includes('/login')) {
            console.log('üîê ÈúÄË¶ÅÁôªÂΩïÔºåÊ≠£Âú®ÁôªÂΩï...');
            
            // Â°´ÂÜôÁôªÂΩï‰ø°ÊÅØ
            await page.fill('input[name="username"]', 'admin');
            await page.fill('input[name="password"]', 'admin123');
            await page.click('button[type="submit"]');
            
            // Á≠âÂæÖÁôªÂΩïÂÆåÊàê
            await page.waitForLoadState('networkidle');
            
            console.log('‚úÖ ÁôªÂΩïÊàêÂäü');
        }
        
        // Ê£ÄÊü•Credit BalanceÂàóÊòØÂê¶Â≠òÂú®
        const creditBalanceHeader = await page.locator('th:has-text("Credit")').first();
        const headerExists = await creditBalanceHeader.count() > 0;
        
        if (headerExists) {
            console.log('‚úÖ Credit BalanceÂàóÊ†áÈ¢òÂ≠òÂú®');
            
            // Êü•ÊâæÊµãËØïÈÇÆÁÆ±ÁöÑË°å
            const testEmailRow = page.locator(`tr:has-text("${TEST_EMAIL}")`);
            const rowExists = await testEmailRow.count() > 0;
            
            if (rowExists) {
                console.log('‚úÖ ÊâæÂà∞ÊµãËØïÈÇÆÁÆ±Ë°å');
                
                // Ëé∑ÂèñCredit BalanceÂÄº
                const creditBalanceCell = testEmailRow.locator('td').nth(6); // Credit BalanceÊòØÁ¨¨7ÂàóÔºàÁ¥¢Âºï6Ôºâ
                const creditBalanceText = await creditBalanceCell.textContent();
                
                console.log('üí∞ Credit BalanceÊòæÁ§∫ÂÄº:', creditBalanceText?.trim());
                
                // Êà™Âõæ‰øùÂ≠ò
                await page.screenshot({ 
                    path: 'credit-balance-test-screenshot.png',
                    fullPage: true 
                });
                console.log('üì∏ Â∑≤‰øùÂ≠òÈ°µÈù¢Êà™Âõæ: credit-balance-test-screenshot.png');
                
            } else {
                console.log('‚ö†Ô∏è Êú™ÊâæÂà∞ÊµãËØïÈÇÆÁÆ±Ë°å');
            }
        } else {
            console.log('‚ùå Credit BalanceÂàóÊ†áÈ¢ò‰∏çÂ≠òÂú®');
        }
        
        console.log('\nüèÅ PlaywrightÊµãËØïÂÆåÊàê!');
        
    } catch (error) {
        console.error('‚ùå ÊµãËØïËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ:', error);
    } finally {
        // ‰øùÊåÅÊµèËßàÂô®ÊâìÂºÄ10Áßí‰ª•‰æøËßÇÂØü
        console.log('‚è≥ ‰øùÊåÅÊµèËßàÂô®ÊâìÂºÄ10Áßí‰ª•‰æøËßÇÂØü...');
        await page.waitForTimeout(10000);
        
        await browser.close();
        console.log('üîö ÊµèËßàÂô®Â∑≤ÂÖ≥Èó≠');
    }
}

/**
 * ÊµãËØïOrb APIÁõ¥Êé•Ë∞ÉÁî®
 */
async function testOrbAPIDirect() {
    console.log('üß™ ÊµãËØïÁõ¥Êé•Ë∞ÉÁî®Orb API...');
    
    const browser = await chromium.launch({ headless: false });
    const context = await browser.newContext();
    const page = await context.newPage();
    
    try {
        // ÊµãËØïÊàë‰ª¨‰πãÂâçÂèëÁé∞ÁöÑAPIÁ´ØÁÇπ
        const token = "IjNkSGhHdXNOTEx1Njg3YWMi.XDJhUCCtWvYZHP2kHezsJZBzGYg";
        
        const orbApiResult = await page.evaluate(async (token) => {
            try {
                // 1. Ëé∑ÂèñÂÆ¢Êà∑‰ø°ÊÅØ
                const customerResponse = await fetch(`https://portal.withorb.com/api/v1/customer_from_link?token=${token}`, {
                    headers: {
                        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
                        'Accept': 'application/json',
                        'Referer': `https://portal.withorb.com/view?token=${token}`
                    }
                });
                
                const customerData = await customerResponse.json();
                
                // 2. Ëé∑ÂèñCredit balance
                const customerId = customerData.customer.id;
                const pricingUnitId = 'jWTJo9ptbapMWkvg'; // User Messages ID
                
                const ledgerResponse = await fetch(`https://portal.withorb.com/api/v1/customers/${customerId}/ledger_summary?pricing_unit_id=${pricingUnitId}&token=${token}`, {
                    headers: {
                        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
                        'Accept': 'application/json',
                        'Referer': `https://portal.withorb.com/view?token=${token}`
                    }
                });
                
                const ledgerData = await ledgerResponse.json();
                
                return {
                    success: true,
                    customerData,
                    ledgerData,
                    creditBalance: ledgerData.credits_balance
                };
                
            } catch (error) {
                return {
                    success: false,
                    error: error.message
                };
            }
        }, token);
        
        if (orbApiResult.success) {
            console.log('‚úÖ Orb APIË∞ÉÁî®ÊàêÂäü!');
            console.log('üí∞ Credit Balance:', orbApiResult.creditBalance);
            console.log('üë§ ÂÆ¢Êà∑ID:', orbApiResult.customerData.customer.id);
            console.log('üìß ÂÆ¢Êà∑ÈÇÆÁÆ±:', orbApiResult.customerData.customer.email);
        } else {
            console.log('‚ùå Orb APIË∞ÉÁî®Â§±Ë¥•:', orbApiResult.error);
        }
        
    } catch (error) {
        console.error('‚ùå Orb APIÊµãËØïÂ§±Ë¥•:', error);
    } finally {
        await browser.close();
    }
}

// ËøêË°åÊµãËØï
async function runAllTests() {
    console.log('üéØ ÂºÄÂßãÂÆåÊï¥ÁöÑCredit BalanceÊµãËØïÂ•ó‰ª∂...\n');
    
    // 1. ÊµãËØïOrb APIÁõ¥Êé•Ë∞ÉÁî®
    await testOrbAPIDirect();
    console.log('\n' + '='.repeat(100) + '\n');
    
    // 2. ÊµãËØïÊàë‰ª¨ÁöÑCredit Balance API
    await testCreditBalanceAPI();
    
    console.log('\nüéâ ÊâÄÊúâÊµãËØïÂÆåÊàê!');
}

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§Êñá‰ª∂
if (import.meta.url === `file://${process.argv[1]}`) {
    runAllTests().catch(console.error);
}

export {
    testCreditBalanceAPI,
    testOrbAPIDirect,
    runAllTests
};
